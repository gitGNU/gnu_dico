/* This file is part of Dico.
   Copyright (C) 1998-2000, 2008 Sergey Poznyakoff

   Dico is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   Dico is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Dico.  If not, see <http://www.gnu.org/licenses/>. */

#include <dictd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <getopt.h>
#include <gettext.h>

OPTIONS_BEGIN(gnu,"dictd",
              [<A DICT daemon.>])

OPTION(config,,FILE,
       [<Read this configuration file.>])
BEGIN
   config_file = optarg;
END

OPTION(foreground, f,,
       [<Operate in foreground.>])
BEGIN
   foreground = 1;
END

OPTION(stderr,,,
       [<Output diagnostic to stderr.>])
BEGIN
   log_to_stderr = 1;
END

OPTION(syslog,,,
       [<Output diagnostic to syslog (default).>])
BEGIN
   log_to_stderr = 0;
END

OPTION(,E,,
       [<Preprocess the config file and exit>])
BEGIN
   mode = MODE_PREPROC;
END

OPTION(preprocessor,,PROG,
       [<Use PROG as a preprocessor for config file.>])
BEGIN
   preprocessor = optarg;
END

OPTION(no-preprocessor,,,
       [<Do not use external preprocessor.>])
BEGIN
   preprocessor = NULL;
END

OPTION(include-dir,I,DIR,
       [<Add the directory DIR to the list of directories\n
        to be searched for header files>])
BEGIN
   add_include_dir(optarg); 
END

OPTION(single-process, s,,
       [<Single-process mode.>])
BEGIN
   single_process = 1;
END

OPTION(inetd, i,,
       [<Inetd mode.>])
BEGIN
   mode = MODE_INETD;
END

OPTION(debug, x, LEVEL-SPEC,
       [<Set debug verbosity level.>])
BEGIN
   debug_level_str = optarg;
   debug_level = atoi(optarg);
END

OPTION(trace-grammar,,,
       [<Trace parsing of the config file.>])
BEGIN
   config_gram_trace(1);
END

OPTION(trace-lex,,,
       [<Trace config file lexer.>])
BEGIN
   config_lex_trace(1);
END

OPTION(config-help,,,
       [<Show configuration file summary.>])
BEGIN
   config_help();
   exit(0);
END   

OPTION(lint,t,,
       [<Check configuration file syntax and exit.>])
BEGIN
   config_lint_option = 1;
END

OPTIONS_END

void
get_options (int argc, char *argv[])
{
    GETOPT(argc, argv)
}
