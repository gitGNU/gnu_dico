\input texinfo @c -*-texinfo-*-
@smallbook
@c %**start of header
@setfilename dico.info
@settitle Dico
@c %**end of header
@setchapternewpage odd

@defcodeindex pr
@defcodeindex op
@defcodeindex kw
@defcodeindex fl

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex tp cp
@syncodeindex op cp
@syncodeindex pr cp
@syncodeindex kw cp
@syncodeindex fl cp

@include version.texi
@include rendition.texi
@include macros.texi

@ifinfo
@dircategory Dictionary
@direntry
* dico: (dico).         A modular dictionary server.
@end direntry
@end ifinfo

@copying
Published by the Free Software Foundation,
51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301 USA 

Copyright @copyright{} 2008 Sergey Poznyakoff

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``Dico Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end copying

@titlepage
@title Dico
@subtitle version @value{VERSION}, @value{UPDATED}
@author Sergey Poznyakoff.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@node Top
@top Dico

This edition of the @cite{Dico Manual}, last updated @value{UPDATED},
documents @command{dico} Version @value{VERSION}.

@end ifnottex

@menu
* Preface::             
* Intro::                Introduction to Dico.
* Building::             Building the Package.
* Dictd::                The dictd daemon.
* Modules::              Dictd modules shipped with Dico.
* Interface::            How to write your own Dico module.
* Reporting Bugs::       How to Report a Bug.

Appendices

* Time and Date Formats::
* Copying This Manual::  The GNU Free Documentation License.
* Concept Index::        Index of Concepts.

@detailmenu
 --- The Detailed Node Listing ---

The @command{dictd} daemon.

* Configuration::
* Dictd Invocation::

Modules

* Outline::
* Dictorg::
* Guile::

@end detailmenu
@end menu

@node Preface
@unnumbered Preface
@UNREVISED

@node Intro
@chapter Introduction to @command{Dico}
@cindex Dico overview
@cindex two-layer model
@cindex protocol layer
@cindex database layer
@cindex RFC 2229
@cindex DICT protocol
@dfn{Dico} is an implementation of @acronym{DICT} dictionary server
(described in @acronym{RFC} 2229) and a set of accompanying utilities.
Dico's @command{dictd} server uses two-layer model.  The @dfn{protocol
layer} is responsible for correct @acronym{DICT} protocol dialog and
is served by the @command{dictd} daemon itself.  The @dfn{database
layer} is responsible for look ups in dictionary databases.  This
layer is handled by external @dfn{loadable modules}.  Thus, Dico
does not impose any specific dictionary database format.  A single
server can handle databases in various formats, provided that
appropriate modules are available.  Several database modules are
shipped with Dico:

@table @asis
@item dictorg
@cindex dictorg database format
  This module provides full support for the format designed by
the @cite{@acronym{DICT} development group} (@uref{http://dict.org}).
This is a @i{de facto} standard for @acronym{DICT} databases.  A
number of dictionary databases in this format are provided by the
@cite{FreeDict} project (@uref{http://freedict.org}).

@item guile
  This module provides an interface to Guile, the @dfn{GNU's
Ubiquitous Intelligent Language for Extensions}
(@uref{http://www.gnu.org/software/guile}) and allows to write
database modules in Scheme programming language.

@item outline
  This module handles simple databases in GNU Emacs @dfn{outline}
format.  It is designed mostly for test purposes.
@end table

  This manual describes how to configure and use the Dico dictionary
system.  It also describes the @acronym{API} for writing
@command{Dico} database modules both in @acronym{C} and in
@acronym{Scheme}.

@node Building
@chapter Building the Package
@UNREVISED
  Building @command{dico} is quite straightforward.  You run
@command{./configure}, then @command{make}, followed by @command{make
install}, and you are done.

  The actions the @command{configure} script performs can be altered
using a set of command line options and variables.  Some of these
options are generic, i.e. common for all packages using the GNU
@command{autoconf} system.  For a detailed description of these option
see the @file{INSTALL} file shipped with the sources.  Yet another
options are specific for @command{Dico}.  We will describe them in
this chapter.

@menu
* Default Preprocessor::
* Guile Support::
* Other Settings::
@end menu

@node Default Preprocessor
@section Default Preprocessor
@cindex Default preprocessor
@cindex preprocessor, default
@vrindex DEFAULT_PREPROCESSOR     
  The runtime configuration system uses @command{m4} to preprocess
the configuration file.  This makes the configuration extremely
flexible.  We recommend to use GNU m4 as a preprocessor@footnote{@uref{http://www.gnu.org/software/m4}}.  However, any
other implementation of @command{m4} may be used.  The @command{configure}
script tries to determine full file name of the preprocessor binary
and the necessary command line options.  In case it makes a wrong
guess, you can instruct it to use a particular preprocessor by using
@env{DEFAULT_PREPROCESSOR} configuration variable.  For example, the
following @command{configure} invocation instructs it to use
@command{/usr/local/bin/gm4}:

@smallexample
$ ./configure DEFAULT_PREPROCESSOR="/usr/local/bin/gm4 -s"
@end smallexample

Note the use of @option{-s} preprocessor option.  It instructs
@command{m4} to produce line directives which help @command{dictd}
produce correct diagnostics about eventual configuration errors.
Unless your @command{m4} implementation does not have this feature, we
recommend to always use it in @env{DEFAULT_PREPROCESSOR} value.

@opindex --without-preprocessor, configuration option
Finally, if you do not wish to use preprocessor at all, you can
disable it using @option{--without-preprocessor} option to
@command{configure}.

@node Guile Support
@section Guile Support
@cindex guile, configuration
  The @dfn{GNU's Ubiquitous Intelligent Language for Extensions}, or
@dfn{Guile}@footnote{@uref{http://www.gnu.org/software/guile}.}  can
be used to write database modules for @command{dico}.  This requires
Guile version 1.8.4 or newer.  The @command{configure} script will
probe for the presence of Guile on your system and automatically
enable its use if its version number is high enough.

@opindex --without-guile, configuration option
  If you do not wish to use Guile, use @option{--without-guile} to
disable it.

@node Other Settings
@section Other Configure Settings

@vrindex LOG_FACILITY
  The @command{dictd} daemon uses @command{syslogd} for diagnostics.
The default syslog facility can be set using @env{LOG_FACILITY}
configuration variable.  Its allowed arguments are @samp{user},
@samp{daemon}, @samp{auth}, @samp{authpriv}, @samp{mail}, @samp{cron},
and @samp{local0} through @samp{local7}.  Case is not significant.  In
addition, these words can be prefixed with @samp{log_}.

  By default, the @samp{daemon} facility is used.
  
@node Dictd
@chapter The @command{dictd} daemon.
@UNREVISED

@menu
* Configuration::
* Dictd Invocation::
@end menu

@node Configuration
@section Configuration
@UNREVISED

@menu
* Syntax::            Configuration file syntax.
* Server Settings::
* Authorization::
* Security Settings::
* Logging and Debuging::
* Access Log::
* General Settings::
* Capabilities::
* Handlers::
* Databases::
* Tuning::
* Preprocessor::      Using preprocessor to improve the configuration.
@end menu

@node Syntax
@subsection Configuration File Syntax
@UNREVISED
  A Dico configuration consists of statements and comments.

  There are three classes of lexical tokens: keywords, values, and
separators. Blanks, tabs, newlines and comments, collectively called
@dfn{white space} are ignored excepty as they serve to separate
tokens.  Some white space is required to separate otherwise adjacent 
keywors and values.

@menu
* Comments::
* Statements::
@end menu

@node Comments
@subsubsection Comments
@cindex Comments in a configuration file
@cindex single-line comments
  @dfn{Comments} may appear anywhere where white space may appear in the
configuration file.  There are two kinds of comments:
single-line and multi-line comments.  @dfn{Single-line} comments start
with @samp{#} or @samp{//} and continue to the end of the line:

@smallexample
# This is a comment
// This too is a comment
@end smallexample

@cindex multi-line comments
  @dfn{Multi-line} or @dfn{C-style} comments start with the two
characters @samp{/*} (slash, star) and continue until the first
occurrence of @samp{*/} (star, slash).

  Multi-line comments cannot be nested.

@node Statements
@subsubsection Statements
@cindex statements, configuration file
@cindex configuration file statements
@cindex statement, simple
@cindex simple statements
  A @dfn{simple statement} consists of a keyword and value
separated by any amount of whitespace.  Simple statement is terminated
with a semicolon (@samp{;}), unless it contains a @dfn{here-document}
(see below), in which case semicolon is optional.

  Examples of simple statements:

@smallexample
timing yes;
access-log-file /var/log/access_log;
@end smallexample

  A @dfn{keyword} begins with a letter and may contain letters,
decimal digits, underscores (@samp{_}) and dashes (@samp{-}).
Examples of keywords are: @samp{group}, @samp{identity-check}.

  A @dfn{value} can be one of the following:

@table @asis
@item number
  A number is a sequence of decimal digits.

@item boolean
@cindex boolean value
  A boolean value is one of the following: @samp{yes}, @samp{true},
@samp{t} or @samp{1}, meaning @dfn{true}, and @samp{no},
@samp{false}, @samp{nil}, @samp{0} meaninig @dfn{false}.
  
@item unquoted string
@cindex string, unquoted
  An unquoted string may contain letters, digits, and any of the
following characters: @samp{_}, @samp{-}, @samp{.}, @samp{/},
@samp{:}.

@item quoted string
@cindex quoted string
@cindex string, quoted
@cindex escape sequence
  A quoted string is any sequence of characters enclosed in
double-quotes (@samp{"}).  A backslash appearing within a quoted
string introduces an @dfn{escape sequence}, which is replaced
with a single character according to the following rules:

@float Table, backslash-interpretation
@caption{Backslash escapes}
@multitable @columnfractions 0.30 .5
@item Sequence @tab Replaced with
@item \a @tab Audible bell character (@acronym{ASCII} 7)
@item \b @tab Backspace character (@acronym{ASCII} 8)
@item \f @tab Form-feed character (@acronym{ASCII} 12)
@item \n @tab Newline character (@acronym{ASCII} 10)
@item \r @tab Carriage return character (@acronym{ASCII} 13)
@item \t @tab Horizontal tabulation character (@acronym{ASCII} 9)
@item \\ @tab A single backslash (@samp{\})
@item \" @tab A double-quote.
@end multitable
@end float

  In addition, the sequence @samp{\@var{newline}} is removed from
the string.  This allows to split long strings over several
physical lines, e.g.:

@smallexample
@group
"a long string may be\
 split over several lines"
@end group
@end smallexample

  If the character following a backslash is not one of those specified
above, the backslash is ignored and a warning is issued.

  Two or more adjacent quoted strings are concatenated, which gives
another way to split long strings over several lines to improve
readability.  The following fragment produces the same result as the
example above:

@smallexample
@group
"a long string may be"
" split over several lines"
@end group
@end smallexample

@anchor{here-document}
@item Here-document
@cindex here-document
  @dfn{Here-document} is a special construct that allows to introduce
strings of text containing embedded newlines.  

  The @code{<<@var{word}} construct instructs the parser to read all
the following lines up to the line containing only @var{word}, with
possible trailing blanks.  Any lines thus read are concatenated
together into a single string.  For example:

@smallexample
@group
<<EOT
A multiline
string
EOT
@end group
@end smallexample

  Body of a here-document is interpreted the same way as
double-quoted string, unless @var{word} is preceded by a backslash
(e.g. @samp{<<\EOT}) or enclosed in double-quotes, in which case
the text is read as is, without interpretation of escape sequences.

  If @var{word} is prefixed with @code{-} (a dash), then all leading
tab characters are stripped from input lines and the line containing
@var{word}.  Furthermore, if @code{-} is followed by a single space,
all leading whitespace is stripped from them.  This allows to indent
here-documents in a natural fashion.  For example:

@smallexample
@group
<<- TEXT
    All leading whitespace will be
    ignored when reading these lines.
TEXT
@end group
@end smallexample

  As a ``syntactical sugar'', statements containing here-documents are
not required to end with a semicolon.  If, however, a semicolon is
used, it may not appear on the same line with the terminating
@var{word} delimiter, e.g.:

@smallexample
help-text <<-EOT
        A sample help text.
EOT
;
@end smallexample

@item list
@cindex list
  A @dfn{list} is a comma-separated list of values.  Lists are
delimited by parentheses.  The following example shows a statement
whose value is a list of strings:

@smallexample
capability (mime,auth);
@end smallexample

  In any case where a list is appropriate, a single value is allowed
without being a member of a list: it is equivalent to a list with a
single member.  This means that, e.g. @samp{capability mime;} is
equivalent to @samp{capability (mime);}.

@end table

@cindex statement, block
@cindex block statement
  A @dfn{block statement} introduces a logical group of another
statements.  It consists of a keyword, followed by an optional value,
and a sequence of statements enclosed in curly braces, as shown in
the example below:

@smallexample
@group
handler outline @{
        type loadable;
        command "outline";
@}
@end group
@end smallexample

  The closing curly brace may be followed by a semicolon, although
this is not required.

@node Server Settings
@subsection Control Server Behavior
@UNREVISED
  Server settings control how @command{dictd} is executed on the
server machine.

@anchor{user statement}
@deffn {Configuration} user @var{string}
Run with the privileges of this user.  @command{Dictd} does not
require root privileges, so it is recommended to always use this
statement when running @command{dictd} in daemon mode.
@FIXME-xref{operation modes}. 

Example:
@smallexample
user nobody;
@end smallexample
@end deffn

@anchor{group statement}
@deffn {Configuration} group @var{list}
If @code{user} is given, @command{dictd} will drop all supplementary
groups and switch to the principal group of that user.  Sometimes,
however, it may be necessary to retain one or more supplementary
groups.  For example, this might be necessary to access dictionary
databases.  The @code{group} statement retains the supplementary
groups listed in @var{list}, e.g.:

@smallexample
user nobody
group (man, dict)
@end smallexample

This statement is ignored if @code{user} statement is not present or
if @command{dictd} is running in inetd mode. @FIXME-xref{operation modes}.
@end deffn

@deffn {Configuration} mode @var{enum}
Sets server operation mode. The argument is one of:

@table @asis
@item daemon
Run in daemon mode.

@item inetd
Run in inetd mode.
@end table

@FIXME-xref{operation modes}.
This statement is overridden by the @option{--inetd} command line
option. @FIXME-xref{--inetd}.
@end deffn

@deffn {Configuration} listen @var{list};
Specify @acronym{IP} addresses and ports to listen on in daemon mode.
By default, @command{dictd} will listen on port 2628 on all existing
interfaces.  Use @code{listen} statement to abridge the list of
interfaces to listen on, or to change the port number. 

Elements of @var{list} can have the following form:

@table @asis
@item @var{host}:@var{port}
  Specifies an @acronym{IP}v4 socket to listen on.  The @var{host}
part is either a host name or an @acronym{IP} in ``dotted-quad''
form.  The @var{port} part is either a numeric port number or a
symbolic service name which is found in @file{/etc/services} file.

  Either of the two parts may be omitted.  If @var{host} is omitted,
it defaults to @samp{0.0.0.0}, which means ``listen on all
interfaces''.  If @var{port} is omitted, it defaults to 2628.  In this
case the colon may be omitted, too.

  Examples:
  
@smallexample
listen localhost:2628;
listen 127.0.0.1;
listen :2628;
@end smallexample

@item @var{filename}
  Specifies the name of a @acronym{UNIX} socket to listen on.
@end table

  The following statement instructs @command{dictd} to listen on
the address @samp{10.10.10.1}, port 2628 and on the @acronym{UNIX}
socket @file{/var/run/dict}:

@smallexample
listen (10.10.10.1, /var/run/dict);
@end smallexample

@end deffn

@deffn {Configuration} pidfile @var{string}
Store @acronym{PID} of the master process in this file.
Default is @file{@var{localstatedir}/run/dictd.pid}. 
Notice that the privileges of this default directory are
may be insufficient for @command{dictd} to write there after switching
to users privileges (@pxref{user statement}).  One solution to this is
to create a subdirectory with the same owner as given by @code{user}
statement and to point the @acronym{PID} file there:

@smallexample
pidfile /var/run/dict/dictd.pid;
@end smallexample

Another solution is to make @acronym{PID} directory group-writable and
to add the owner group to the @code{group} statement (@pxref{group
statement}).

@FIXME{I am not sure this is quite right.  Should `make install'
create the $localstate/run/dict directory?  But then, make doesn't
know what user to set as its owner...}
@end deffn

@deffn {Configuration} max-children @var{number}
Sets maximum number of sub-processes that can run simultaneously.
This is equivalent to the number of clients that can simultaneously
use the server.  The default is 64 sub-processes.
@end deffn

@deffn {Configuration} inactivity-timeout @var{number}
Set inactivity timeout to the @var{number} of seconds.  The server
will disconnect automatically if remote client did not send any
command within this number of seconds.  Setting timeout to 0 disables
inactivity timeout (the default).

Using this statement along with @code{max-children} allows to control
the server load.
@end deffn

@deffn {Configuration} shutdown-timeout @var{number}
When the master server is shutting down, wait this number of seconds for all
children to terminate.  Default is 5 seconds.
@end deffn

@anchor{identity-check}
@deffn {Configuration} identity-check @var{boolean}
Enable identification check using @acronym{AUTH} protocol
(@acronym{RFC} 1413).  The received user name or @acronym{UID} can
be shown in access log using @code{%l} format (@pxref{Access Log}).
@end deffn

@deffn {Configuration} ident-keyfile @var{string}
Use encryption keys from the named file to decrypt @acronym{AUTH}
replies encrypted using @acronym{DES}.
@end deffn

@node Authorization
@subsection Authorization
@UNREVISED

@FIXME{
capability auth;
}

@smallexample
@group
# Define user database for authentication.
user-db <url: string> @{
  # Password file or query.
  get-password <arg: string>;

  # File containing user group information or a query to retrieve it.
  get-groups <arg: string>;
@}
@end group
@end smallexample

@deffn {Block} user-db @var{string}
# Define user database for authentication.

@deffn {user-db statement} get-password @var{string}
  # Password file or query.
@end deffn

@deffn {user-db statement} get-groups @var{string}
  # File containing user group information or a query to retrieve it.
@end deffn
@end deffn


@node Security Settings
@subsection Security Settings
@UNREVISED

@deffn {Configuration} show-sys-info @var{enum}
This statement controls whether to show system information in reply
to @code{SHOW SERVER} command.  Allowed values are:

@table @asis
@item always
Always show system information.

@item never
Never show it.  This is the default.

@item auth
Show the system information for authorized users only
(@pxref{Authorization}).  See also @code{sys-info-groups} below, which
modifies this setting.
@end table

The system information shown includes the following data: the name
of the package and its version, the name of the system where it was
built and the kernel version thereof, the host name, total operational
time of the daemon, number of subprocesses executed so far and average
usage frequency.  For example:

@smallexample
dictd (dico @value{VERSION}) on Linux 2.6.24.4,
dict.example.net up 110+04:42:58, 19647044 forks (6867.9/hour)
@end smallexample
@end deffn

@deffn {Configuration} sys-info-groups @var{list}
This statement modifies the effect of @code{show-sys-info auth;}: when
both statements are used, the system information will be displayed
only if the user has authenticated himself @emph{and} he is a member
of one of the groups listed in @var{list}.

For example:

@smallexample
show-sys-info auth;
sys-info-groups (admin,wheel);
@end smallexample
@end deffn

@deffn {Configuration} require-auth @var{boolean}
Require authentication for access to databases.  If
@code{require-auth} is set to @code{true}, all databases become
visible only for authenticated users (@pxref{Authorization}).  Default
is @code{false}.

The effect of this statement is modified by the @code{require-auth}
statement in @code{database} group (@pxref{pre-database require-auth}).
@end deffn

@FIXME{
@smallexample
database @{
  # Require authentication for access to this database.
  require-auth <arg: boolean>;

  # The database is visible only for users from these groups
  groups <arg: list of string>;
@}
@end smallexample
}

@node Logging and Debuging
@subsection Logging and Debuging
@cindex logging, configuration
  The directive described in this subsection provide basic logging
capabilities.  

@deffn {Configuration} log-tag @var{string}
Prefix syslog messages with this string.  By default, the program name
is used.
@end deffn

@deffn {Configuration} log-facility @var{string}
Set syslog facility to use.  Allowed values are: @samp{user},
@samp{daemon}, @samp{auth}, @samp{authpriv}, @samp{mail}, @samp{cron},
@samp{local0} through @samp{local7} (case-insensitive), or a facility
number.
@end deffn

@deffn {Configuration} log-print-severity @var{boolean}
Prefix diagnostics messages with a string identifying their severity.
@end deffn

@deffn {Configuration} transcript @var{boolean}
Log session transcript.  The lines received from client are prefixed
with @samp{C:}, those sent in reply are marked with @samp{S:}.  Here's
am exerpts from the transcript output:

@smallexample
S: 220 Trurl.gnu.org.ua dictd (dico 1.99.90) <mime.xversion>
<1645.1212874507@@Trurl.gnu.org.ua>
C: client ``Kdict''
S: 250 ok
C: show db
S: 110 16 databases present
S: afr-deu ``Afrikaans-German Freedict dictionary''
S: afr-eng ``Afrikaans-English FreeDict Dictionary''
[...]
S: .
S: 250 ok
@end smallexample

This option produces lots of output and can significantly slow down
the server.  Use it only if you are debugging @command{dictd} or
some remote client.  Never use it in a production environment.
@end deffn

@node Access Log
@subsection Access Log
@cindex access log
@cindex logging requests
@cindex Apache
  Dico provides a feature similar to Apache's @code{CustomLog}, which
allows to keep a log of @code{MATCH} and @code{DEFINE} requests.  To
enable this feature, specify the name of the log file using the
following directive:
  
@deffn {Configuration} access-log-file @var{string}
Set access log file name.

@smallexample
access-log-file /var/log/dico/access.log;
@end smallexample
@end deffn

  The format of log file entries is specified using
@code{access-log-format} directive:

@deffn {Configuration} access-log-format @var{string}
Set format string for access log file.
@end deffn

@cindex % formats
  Its argument can contain literal characters, which are copied into
the log file verbatim, and @dfn{format specifiers}, i.e. special
sequences which begin with @samp{%} and are replaced in the log file
as shown in the table below.

@table @asis
@item %%
The percent sign.

@item %a
Remote @acronym{IP}-address.

@item %A
Local @acronym{IP}-address.

@item %B
Size of response in bytes.

@item %b
Size of response in bytes in @acronym{CLF} format, i.e. a @samp{-} rather
than a @samp{0} when no bytes are sent.

@item %C
Remote client (from @code{CLIENT} command). 

@item %D
The time taken to serve the request, in microseconds.

@item %h
Remote host.

@item %H
Request command verb (@code{DEFINE} or @code{MATCH}).

@item %l
Remote logname (from identd, if supplied).  This will return a
dash unless @code{identity-check} is set to true.
@xref{identity-check}.

@item %m
The search strategy.

@item %p
The canonical port of the server serving the request.

@item %P
The @acronym{PID} of the child that serviced the request.

@item %q
The database from the request.

@item %r
Full request.

@item %@{@var{n}@}R
The @var{n}th token from the request (@var{n} is 0-based).

@item %s
Reply status.  For multiple replies, the form @samp{%s} returns the
status of the first reply, while @samp{%>s} returns that of the last
reply.

@item %t
Time the request was received in the standard Apache format, e.g.:

@smallexample
[04/Jun/2008:11:05:22 +0300]
@end smallexample

@item %@{@var{format}@}t
The time, in the form given by @var{format}, which should be a valid
@code{strftime} format.  @xref{Time and Date Formats}, for a detailed
description.

The standard @samp{%t} format is equivalent to

@smallexample
[%d/%b/%Y:%H:%M:%S %z]
@end smallexample

@item %T
The time taken to serve the request, in seconds.

@item %u
Remote user from @code{AUTH} command.

@item %v
The host name of the server serving the request.  @xref{hostname
directive}.

@item %V
Actual host name of the server (in case it was overridden in
configuration).

@item %W
The word from the request.
@end table

  For the reference, here is the list of format specifiers that
have different meaning than in Apache: @samp{%C}, @samp{%H}, @samp{%m},
@samp{%q}.  The following format specifiers are unique to Dico:
@samp{%@{@var{n}@}R}, @samp{%V}, @samp{%W}.

  Absense of the @code{access-log-format} directive is equivalent to
the following statement:

@smallexample
access-log-format "%h %l %u %t \"%r\" %>s %b";
@end smallexample

@cindex webalizer
  It was chosen so as to be compatible with Apache access logs and 
be easily parsable by existing log analyzing tools, such as
@command{webalizer}.

  Extending this format string with the client name produces a log
format similar to Apache @samp{combined log}:

@smallexample
access-log-format "%h %l %u %t \"%r\" %>s %b \"\" \"%C\"";
@end smallexample


@node General Settings
@subsection General Settings
  The settings in this subsection configure basic behavior of the
@acronym{DICT} daemon.
  
@deffn {Configuration} initial-banner-text @var{string}
Display the @var{string} in the textual part of the initial server
reply.

@anchor{initial reply}
When connection is established, the server sends an initial reply to
the client, that looks like in the example below:

@smallexample
220 Trurl.gnu.org.ua <auth.mime> <520.1212912026@@Trurl.gnu.org.ua>
@end smallexample

The part of this reply after the host name and the first angle
bracket is modifiable and can contain arbitrary text.  You can use
@code{initial-banner-text} to append any additional information
there.  Note, that @var{string} may not contain newlines.  For
example:

@smallexample
initial-banner-text "Please authenticate yourself,";
@end smallexample

This statement produces the following initial reply (split over two
lines for readability):

@smallexample
220 Trurl.gnu.org.ua Please authenticate yourself,
  <auth.mime> <520.1212912026@@Trurl.gnu.org.ua>
@end smallexample
@end deffn

@anchor{hostname directive}
@deffn {Configuration} hostname @var{string}
Set the hostname.  By default, the server determines it automatically.  If,
however, it makes a wrong guess, you can fix it using this directive.

The server hostname is used, among others, in the initial reply after
@samp{220} code (see above) and may also be displayed in the access
log file using @samp{%v} escape (@pxref{Access Log}).
@end deffn

@deffn {Configuration} server-info @var{string}
Set server description to be shown in reply to @code{SHOW SERVER} command.

The first line of the reply, after the usual @samp{114} response line,
shows the name of host where the server is running.  If the settings
of @code{show-sys-info} and @code{sys-info-groups} (@pxref{Security
Settings}) allow, some additional information about the system is
printed.

The lines that follow are taken from the @code{server-info}
directive.  It is common to specify @var{string} using
``here-document'' syntax (@pxref{here-document}), e.g.:

@smallexample
server-info <<EOT
Welcome to the FOO dictionary service.

Contact <dict@@foo.org> if you have questions or
suggestions.
EOT
@end smallexample

@end deffn

@deffn {Configuration} help-text @var{string}
Set the text to be displayed in reply to the @acronym{HELP} command.

The default reply to @acronym{HELP} command displays a list of
commands understood by the server with a short description of each.

You can use @command{help-text} directive to @emph{append} arbitrary
text to that output, provided that you begin @var{string} with a
plus sign, e.g.:

@smallexample
help-text <<-EOT
  +
  The commands beginning with an X are extensions.
EOT
@end smallexample

If @var{string} begins with any character, except @samp{+}, it will
replace the default help output.  For example:

@smallexample
help-text <<-EOT
  There is no help.
  See RFC 2229 for detailed information.
EOT
@end smallexample
@end deffn

@deffn {Configuration} default-strategy @var{string}
Set the name of the default matching strategy
(@FIXME-pxref{strategies}).  By default, Levenshtein matching is used,
which is equivalent to

@smallexample
default-strategy lev;
@end smallexample
@end deffn

@node Capabilities
@subsection Server Capabilities
  @dfn{Capabilities} are certain server features that can be enabled
or disabled at the system administrator's will. 

@deffn {Configuration} capability @var{list}
Request additional capabilities from @var{list}.
@end deffn

  The argument to @code{capability} directive must contain names
of existing Dico capabilities.  These are listed in the following
table:

@table @asis
@item auth
The @code{AUTH} command is supported. @xref{Authorization}.

@item mime
The @code{OPTION MIME} command is supported.  Notice that
@acronym{RFC} 2229 requires all servers to support that command, so
you should always specify this capability.

@item xversion
The @code{XVERSION} command is supported.  It is a Dico extension that
displays the @command{dictd} implementation and version number. 
@FIXME-xref{extended and experimental commands}.

@item xlev
The @code{XLEV} command is supported.  This command allows to set and
query maximal Levenshtein distance for @code{lev} matching strategy.
@FIXME-xref{matching strategies}. @FIXME-xref{extended and
experimental commands}. 
@end table

  Capabilities set using the @command{capability} directive are
displayed in the initial server reply (@pxref{initial reply}), and
appropriate entries are added to the @code{HELP} command output.

@node Handlers
@subsection Database Modules
@UNREVISED
@deffn {Configuration} module-load-path @var{list}
# List of directories searched for handler modules.
@end deffn

@smallexample
@group
# Define a database handler.
handler <name: string> @{
  # Command line.
  command <arg: string>;
@}
@end group
@end smallexample

@deffn {Configuration} handler @var{string}
# Define a database handler.
@end deffn

@deffn {Configuration} command @var{string}
@end deffn

@node Databases
@subsection Databases
@UNREVISED

@deffn {Configuration} database
# Define a dictionary database.

@deffn {Database} name @var{string}
  # Dictionary name (a single word).
@end deffn

@deffn {Database} description @var{string}
  # Short description, to be shown in reply to SHOW DB command.
@end deffn

@deffn {Database}  info @var{string}
  # Full description of the database, to be shown in reply to SHOW INFO command.
@end deffn

@deffn {Database} handler @var{string}
# Name of the handler for this database.
@end deffn

@anchor{pre-database require-auth}
@deffn {Database} require-auth @var{boolean}
  # Require authentication for access to this database.
@end deffn

@deffn {Database} groups @var{list}
  # The database is visible only for users from these groups
@end deffn

@deffn {Database} content-type @var{string}
  # Content type for MIME replies.
@end deffn

@deffn {Database} content-transfer-encoding @var{string}
  # Content transfer encoding for MIME replies.
@end deffn
@end deffn

@node Tuning
@subsection Tuning

@deffn {Configuration} timing @var{boolean}
# Provide timing information after successful completion of an operation.
@end deffn

@node Preprocessor
@subsection Using Preprocessor to Improve the Configuration.
@UNREVISED

@smallexample
@group
m4_define(`defdb', `
database @{
        name "$1";
        handler "dictorg database=$1";m4_dnl
m4_ifelse(`$2',,,`
        description "$2";')
@}
')
@end group
@end smallexample

@smallexample
@group
defdb(eng-swa)
defdb(swa-eng)
defdb(afr-eng,Afrikaans-English Dictionary)
defdb(eng-afr,English-Afrikaans Dictionary)
@end group
@end smallexample


@node Dictd Invocation
@section Dictd Invocation
@UNREVISED

@node Modules
@chapter Modules
@UNREVISED

@menu
* Outline::
* Dictorg::
* Guile::
@end menu

@node Outline
@section The @command{outline} module.
@UNREVISED

@node Dictorg
@section The @command{dictorg} module.
@UNREVISED

@node Guile
@section The @command{guile} module.
@UNREVISED

@node Interface
@chapter Dico Module Interface
@UNREVISED

@node Reporting Bugs
@chapter How to Report a Bug
@UNREVISED

@node Time and Date Formats
@appendix Time and Date Formats
@include strftime.texi

@node Copying This Manual
@appendix GNU Free Documentation License
@include fdl.texi

@node Concept Index
@comment node-name,  next,  previous,  up
@unnumbered Concept Index

This is a general index of all issues discussed in this manual

@printindex cp

@bye




