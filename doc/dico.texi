\input texinfo @c -*-texinfo-*-
@smallbook
@c %**start of header
@setfilename dico.info
@settitle Dico
@c %**end of header
@setchapternewpage odd

@defcodeindex pr
@defcodeindex op
@defcodeindex kw
@defcodeindex fl

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex tp cp
@syncodeindex op cp
@syncodeindex pr cp
@syncodeindex kw cp
@syncodeindex fl cp

@include version.texi
@include rendition.texi
@include macros.texi

@ifinfo
@dircategory Dictionary
@direntry
* dico: (dico).         A modular dictionary server.
@end direntry
@end ifinfo

@copying
Published by the Free Software Foundation,
51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301 USA 

Copyright @copyright{} 2008 Sergey Poznyakoff

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``Dico Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end copying

@titlepage
@title Dico
@subtitle version @value{VERSION}, @value{UPDATED}
@author Sergey Poznyakoff.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@headings off
@page
@w{ }
@sp 9
@quotation
@i{D@'edi@'e @`a la m@'emoire de Jacques Brel.}
@end quotation
@w{ }
@page
@w{ }
@page
@headings on

@page
@summarycontents
@page
@contents

@ifnottex
@node Top
@top Dico

This edition of the @cite{Dico Manual}, last updated @value{UPDATED},
documents Dico Version @value{VERSION}.

@end ifnottex

@menu
* Preface::             
* Intro::                Introduction to Dico.
* Building::             Building the Package.
* Dictd::                The dictd daemon.
* Modules::              Dictd modules shipped with Dico.
* Interface::            How to write your own Dico module.
* Reporting Bugs::       How to Report a Bug.

Appendices

* Time and Date Formats::
* Copying This Manual::  The GNU Free Documentation License.
* Concept Index::        Index of Concepts.

@detailmenu
 --- The Detailed Node Listing ---

Building the Package

* Default Preprocessor::
* Guile Support::
* Other Settings::

The @command{dictd} daemon.

* Daemon Mode::
* Inetd Mode::
* Configuration::
* Dictd Invocation::

Configuration

* Syntax::               Configuration file syntax.
* Server Settings::
* Authorization::
* ACL::                  Access Control Lists
* Security Settings::
* Logging and Debuging::
* Access Log::
* General Settings::
* Capabilities::
* Handlers::
* Databases::
* Tuning::
* Preprocessor::         Using preprocessor to improve the configuration.

Configuration File Syntax

* Comments::
* Pragmatic Comments::
* Statements::

Databases

* Database Visibility::

Modules

* Outline::
* Dictorg::
* Guile::

@end detailmenu
@end menu

@node Preface
@unnumbered Preface
@UNREVISED

@node Intro
@chapter Introduction to Dico
@cindex Dico overview
@cindex two-layer model
@cindex protocol layer
@cindex database layer
@cindex RFC 2229
@cindex DICT protocol
@dfn{Dico} is an implementation of @acronym{DICT} dictionary server
(described in @acronym{RFC} 2229) and a set of accompanying utilities.
Dico's @command{dictd} server uses two-layer model.  The @dfn{protocol
layer} is responsible for correct @acronym{DICT} protocol dialog and
is served by the @command{dictd} daemon itself.  The @dfn{database
layer} is responsible for look ups in dictionary databases.  This
layer is handled by external @dfn{loadable modules}.  Thus, Dico
does not impose any specific dictionary database format.  A single
server can handle databases in various formats, provided that
appropriate modules are available.  Several database modules are
shipped with Dico:

@table @asis
@item dictorg
@cindex dictorg database format
  This module provides full support for the format designed by
the @cite{@acronym{DICT} development group} (@uref{http://dict.org}).
This is a @i{de facto} standard for @acronym{DICT} databases.  A
number of dictionary databases in this format are provided by the
@cite{FreeDict} project (@uref{http://freedict.org}).

@item guile
  This module provides an interface to Guile, the @dfn{GNU's
Ubiquitous Intelligent Language for Extensions}
(@uref{http://www.gnu.org/software/guile}) and allows to write
database modules in Scheme programming language.

@item outline
  This module handles simple databases in GNU Emacs @dfn{outline}
format.  It is designed mostly for test purposes.
@end table

  This manual describes how to configure and use the Dico dictionary
system.  It also describes the @acronym{API} for writing
Dico database modules both in @acronym{C} and in
@acronym{Scheme}.

@node Building
@chapter Building the Package
  Building Dico is quite straightforward.  You run
@command{./configure}, then @command{make}, followed by @command{make
install}, and you are done.

  The actions the @command{configure} script performs can be altered
using a set of command line options and variables.  Some of these
options are generic, i.e. common for all packages using the GNU
@command{autoconf} system.  For a detailed description of these option
see the @file{INSTALL} file shipped with the sources.  Yet another
options are specific for Dico.  We will describe them in this chapter.

@menu
* Default Preprocessor::
* Guile Support::
* Other Settings::
@end menu

@node Default Preprocessor
@section Default Preprocessor
@cindex Default preprocessor
@cindex preprocessor, default
@vrindex DEFAULT_PREPROCESSOR     
  The runtime configuration system uses @command{m4} to preprocess
the configuration file (@pxref{Preprocessor}, which makes the
configuration extremely flexible.  We recommend to use GNU m4 as a
preprocessor@footnote{@uref{http://www.gnu.org/software/m4}}.
However, any other implementation of @command{m4} may be used.  The
@command{configure} script tries to determine full file name of the
preprocessor binary and the necessary command line options.  In case
it makes a wrong guess, you can instruct it to use a particular
preprocessor by using @env{DEFAULT_PREPROCESSOR} configuration
variable.  For example, the following @command{configure} invocation
instructs it to use @command{/usr/local/bin/gm4}:

@smallexample
$ ./configure DEFAULT_PREPROCESSOR="/usr/local/bin/gm4 -s"
@end smallexample

Note the use of @option{-s} preprocessor option.  It instructs
@command{m4} to produce line directives which help @command{dictd}
produce correct diagnostics about eventual configuration errors.
Unless your @command{m4} implementation does not have this feature, we
recommend to always use it in @env{DEFAULT_PREPROCESSOR} value.

@opindex --without-preprocessor, configuration option
Finally, if you do not wish to use preprocessor at all, you can
disable it using @option{--without-preprocessor} option to
@command{configure}.

@node Guile Support
@section Guile Support
@cindex guile, configuration
  The @dfn{GNU's Ubiquitous Intelligent Language for Extensions}, or
@dfn{Guile}@footnote{@uref{http://www.gnu.org/software/guile}.}  can
be used to write database modules for Dico.  This requires
Guile version 1.8.4 or newer.  The @command{configure} script will
probe for the presence of Guile on your system and automatically
enable its use if its version number is high enough.

@opindex --without-guile, configuration option
  If you do not wish to use Guile, use @option{--without-guile} to
disable it.

@node Other Settings
@section Other Configure Settings

@vrindex LOG_FACILITY
  The @command{dictd} daemon uses @command{syslogd} for diagnostics.
The default syslog facility can be set using @env{LOG_FACILITY}
configuration variable.  Its allowed arguments are @samp{user},
@samp{daemon}, @samp{auth}, @samp{authpriv}, @samp{mail}, @samp{cron},
and @samp{local0} through @samp{local7}.  Case is not significant.  In
addition, these words can be prefixed with @samp{log_}.

  By default, the @samp{daemon} facility is used.
  
@node Dictd
@chapter The @command{dictd} daemon.
@cindex @command{dictd}, description
  The main component of Dico is @command{dictd} daemon.  It is
responsible for serving client requests and for coordinating the work
of dictionary modules.

@cindex @command{dictd}, operation modes
There are two @dfn{operation modes}: @samp{daemon} and @samp{inetd}.

@menu
* Daemon Mode::
* Inetd Mode::
* Configuration::
* Dictd Invocation::
@end menu

@node Daemon Mode
@section Daemon Operation Mode
@cindex operation modes of @command{dictd}
@cindex daemon operation mode
  The @samp{daemon} mode is enabled by @code{mode daemon} statement in
the configuration file (@pxref{mode statement})).  It is also the
default mode.  In daemon mode @command{dictd} listens for incoming 
requests on one or several interfaces.  Unless the
@command{--foreground} option is specified, it disconnects from the 
controlling terminal and switches to background (becomes a
@dfn{daemon}).  When an incoming connection arrives, it forks a
subprocess for handling it.

@cindex signals handled by @command{dictd}
@cindex SIGTERM
@cindex SIGQUIT
@cindex SIGINT
@cindex SIGHUP
  In this mode the following signals cause @command{dictd} to
terminate: @samp{SIGTERM}, @samp{SIGQUIT}, and @samp{SIGINT}.  The
@samp{SIGHUP} signal causes the program to restart.  This works only
if both the program name and its configuration file name (if given
using @option{--config} option) are absolute file names.

@cindex SIGHUP handling
@cindex restart procedure
@cindex restarting @command{dictd}
  Upon receiving @samp{SIGHUP}, @command{dictd} first verifies if the
configuration file does not contain fatal errors.  To do that, the
program executes a copy of itself with @option{--lint} option
(@pxref{--lint}) and analyzes its return value.  Only if this check
passes, @command{dictd} restarts itself.  This ensures that the daemon
will not terminate due to unnoticed errors in its configuration file.

@cindex termination procedure
@cindex terminating @command{dictd}
  Upon receiving @samp{SIGTERM}, @samp{SIGQUIT}, or @samp{SIGINT}, the
program stops accepting incoming requests and sends the @samp{SIGTERM}
signal to all active subprocesses.  Then it waits a predefined amount
of time for all processes to terminate (@pxref{shutdown-timeout}).
Any subprocesses that do not terminate after this time are sent
@samp{SIGKILL} signal.  Then, the database modules are unloaded and
@command{dictd} terminates.

  Several command line options are provided that modify the behavior
of @command{dictd} in this mode.  These options are mainly designed
for debugging and error-hunting purposes.

@xopindex{foreground, introduced}
@xopindex{stderr, introduced}
  The @option{--foreground} option instructs the server to not
disconnect from the controlling terminal and to remain in the
foreground.  It is often used with @option{--stderr} option, 
which instructs @command{dictd} to output all diagnostic to the
standard error output, instead of syslog which is used by default.

@node Inetd Mode
@section Inetd Operation Mode
@cindex inetd operation mode
@xopindex{inetd, introduced}
@flindex inetd.conf
  In @samp{inetd} operation mode @command{inetd} receives requests
from standard input and sends its replies to the standard output.
This mode is enabled by @code{mode inetd} statement (@pxref{mode
statement}) in configuration file, or by the @option{--inetd} command
line option (@pxref{--inetd}).  This mode is usually used when
invoking @command{dictd} from @file{inetd.conf} file, as in example
below:

@smallexample
dict  stream  tcp  nowait  nobody /usr/local/bin/dictd --inetd
@end smallexample
  
@node Configuration
@section Configuration
@cindex configuration file
@flindex dictd.conf
@xopindex{config, introduced}
  Upon startup, @command{dictd} reads its settings and database
definitions from a @dfn{configuration file} @file{dictd.conf}.  By
default it is located in @var{$sysconfidr} (i.e., in most cases
@file{/usr/local/etc}, or @file{/etc}), but an alternative location
may be specified using @option{--config} command line option
(@pxref{--config}).

  If any errors are encountered in the configuration file, the program
reports them on the standard error and exits with a non-zero status.

@xopindex{lint, introduced}
  To test the configuration file without starting the server use
@option{--lint} (@option{-t}) command line option.  It causes
@command{dictd} to check configuration file and to exit with status 0
if no errors were detected, and withs status 1 otherwise.

@opindex -E, introduced
@xopindex{no-preprocessor, introduced}
  Before parsing, configuration file is preprocessed using
@command{m4} (@pxref{Preprocessor}).  To see the preprocessed
configuration without actually parsing it, use @option{-E} command
line option.  To avoid preprocessing it, use
@option{--no-preprocessor} option.

@xopindex{config-help, introduced}
  The rest of this section describes the configuration file syntax in
detail.  You can receive a concise summary of all configuration
directives any time by running @command{dictd --config-help}.

@menu
* Syntax::               Configuration file syntax.
* Server Settings::
* Authorization::
* ACL::                  Access Control Lists
* Security Settings::
* Logging and Debuging::
* Access Log::
* General Settings::
* Capabilities::
* Handlers::
* Databases::
* Tuning::
* Preprocessor::         Using preprocessor to improve the configuration.
@end menu

@node Syntax
@subsection Configuration File Syntax
  A Dico configuration consists of statements and comments.

  There are three classes of lexical tokens: keywords, values, and
separators. Blanks, tabs, newlines and comments, collectively called
@dfn{white space} are ignored excepty as they serve to separate
tokens.  Some white space is required to separate otherwise adjacent 
keywors and values.

@menu
* Comments::
* Pragmatic Comments::
* Statements::
@end menu

@node Comments
@subsubsection Comments
@cindex Comments in a configuration file
@cindex single-line comments
  @dfn{Comments} may appear anywhere where white space may appear in the
configuration file.  There are two kinds of comments:
single-line and multi-line comments.  @dfn{Single-line} comments start
with @samp{#} or @samp{//} and continue to the end of the line:

@smallexample
# This is a comment
// This too is a comment
@end smallexample

@cindex multi-line comments
  @dfn{Multi-line} or @dfn{C-style} comments start with the two
characters @samp{/*} (slash, star) and continue until the first
occurrence of @samp{*/} (star, slash).

  Multi-line comments cannot be nested.

@node Pragmatic Comments
@subsubsection Pragmatic Comments
@cindex comments, pragmatic
@cindex pragmatic comments
  Pragmatic comments are similar to usual comments, except that they
cause some changes in the way the configuration is parsed.  Pragmatic
comments begin with a @samp{#} sign and end with the next physical
newline character.  As of Dico version @value{VERSION}, the following
pragmatic comments are understood:

@table @code
@kwindex #include
@item #include <@var{file}>
@itemx #include @var{file}
Include the contents of the file @var{file}.  If @var{file} is an
absolute file name, both forms are equivalent.  Otherwise, the form
with angle brackets searches for the file in the @dfn{include 
search path}, while the second one looks for it in the current working
directory first, and, if not found there, in the include search
path.

The default include search path is:

@enumerate 1
@item @file{@var{prefix}/share/dico/@value{VERSION}/include}
@item @file{@var{prefix}/share/dico/include}
@end enumerate

@noindent
Where @var{prefix} is the installation prefix.

  New directories can be appended in front of it using @option{-I}
(@option{--include-dir}) command line option (@pxref{--include-dir}).  

@kwindex #include_once
@item #include_once <@var{file}>
@itemx #include_once @var{file}
  Same as @code{#include}, except that, if the @var{file} has already
been included, it will not be included again.

@kwindex #line
@item #line @var{num}
@itemx #line @var{num} "@var{file}"
  This line causes @command{dictd} to believe, for purposes of error
diagnostics, that the line number of the next source line is given by
@var{num} and the current input file is named by @var{file}.
If the latter is absent, the remembered file name does not change.

@item # @var{num} "@var{file}"
  This is a special form of @code{#line} statement, understood for
compatibility with the @sc{c} preprocessor.
@end table

  In fact, these statements provide a rudimentary preprocessing
features.  For more sophisticated ways to modify configuration before
parsing, see @ref{Preprocessor}.

@node Statements
@subsubsection Statements
@cindex statements, configuration file
@cindex configuration file statements
@cindex statement, simple
@cindex simple statements
  A @dfn{simple statement} consists of a keyword and value
separated by any amount of whitespace.  Simple statement is terminated
with a semicolon (@samp{;}), unless it contains a @dfn{here-document}
(see below), in which case semicolon is optional.

  Examples of simple statements:

@smallexample
timing yes;
access-log-file /var/log/access_log;
@end smallexample

  A @dfn{keyword} begins with a letter and may contain letters,
decimal digits, underscores (@samp{_}) and dashes (@samp{-}).
Examples of keywords are: @samp{group}, @samp{identity-check}.

  A @dfn{value} can be one of the following:

@table @asis
@item number
  A number is a sequence of decimal digits.

@item boolean
@cindex boolean value
  A boolean value is one of the following: @samp{yes}, @samp{true},
@samp{t} or @samp{1}, meaning @dfn{true}, and @samp{no},
@samp{false}, @samp{nil}, @samp{0} meaninig @dfn{false}.
  
@item unquoted string
@cindex string, unquoted
  An unquoted string may contain letters, digits, and any of the
following characters: @samp{_}, @samp{-}, @samp{.}, @samp{/},
@samp{:}.

@item quoted string
@cindex quoted string
@cindex string, quoted
@cindex escape sequence
  A quoted string is any sequence of characters enclosed in
double-quotes (@samp{"}).  A backslash appearing within a quoted
string introduces an @dfn{escape sequence}, which is replaced
with a single character according to the following rules:

@float Table, backslash-interpretation
@caption{Backslash escapes}
@multitable @columnfractions 0.30 .5
@item Sequence @tab Replaced with
@item \a @tab Audible bell character (@acronym{ASCII} 7)
@item \b @tab Backspace character (@acronym{ASCII} 8)
@item \f @tab Form-feed character (@acronym{ASCII} 12)
@item \n @tab Newline character (@acronym{ASCII} 10)
@item \r @tab Carriage return character (@acronym{ASCII} 13)
@item \t @tab Horizontal tabulation character (@acronym{ASCII} 9)
@item \\ @tab A single backslash (@samp{\})
@item \" @tab A double-quote.
@end multitable
@end float

  In addition, the sequence @samp{\@var{newline}} is removed from
the string.  This allows to split long strings over several
physical lines, e.g.:

@smallexample
@group
"a long string may be\
 split over several lines"
@end group
@end smallexample

  If the character following a backslash is not one of those specified
above, the backslash is ignored and a warning is issued.

  Two or more adjacent quoted strings are concatenated, which gives
another way to split long strings over several lines to improve
readability.  The following fragment produces the same result as the
example above:

@smallexample
@group
"a long string may be"
" split over several lines"
@end group
@end smallexample

@anchor{here-document}
@item Here-document
@cindex here-document
  @dfn{Here-document} is a special construct that allows to introduce
strings of text containing embedded newlines.  

  The @code{<<@var{word}} construct instructs the parser to read all
the following lines up to the line containing only @var{word}, with
possible trailing blanks.  Any lines thus read are concatenated
together into a single string.  For example:

@smallexample
@group
<<EOT
A multiline
string
EOT
@end group
@end smallexample

  Body of a here-document is interpreted the same way as
double-quoted string, unless @var{word} is preceded by a backslash
(e.g. @samp{<<\EOT}) or enclosed in double-quotes, in which case
the text is read as is, without interpretation of escape sequences.

  If @var{word} is prefixed with @code{-} (a dash), then all leading
tab characters are stripped from input lines and the line containing
@var{word}.  Furthermore, if @code{-} is followed by a single space,
all leading whitespace is stripped from them.  This allows to indent
here-documents in a natural fashion.  For example:

@smallexample
@group
<<- TEXT
    All leading whitespace will be
    ignored when reading these lines.
TEXT
@end group
@end smallexample

  It is important that the terminating delimiter be the only token on
its line.  The only exception to this rule is allowed if a
here-document appears as the last element of a statement.  In this
case a semicolon can be placed on the same line with its terminating 
delimiter, as in: 

@smallexample
help-text <<-EOT
        A sample help text.
EOT;
@end smallexample

@item list
@cindex list
  A @dfn{list} is a comma-separated list of values.  Lists are
delimited by parentheses.  The following example shows a statement
whose value is a list of strings:

@smallexample
capability (mime,auth);
@end smallexample

  In any case where a list is appropriate, a single value is allowed
without being a member of a list: it is equivalent to a list with a
single member.  This means that, e.g. @samp{capability mime;} is
equivalent to @samp{capability (mime);}.

@end table

@cindex statement, block
@cindex block statement
  A @dfn{block statement} introduces a logical group of another
statements.  It consists of a keyword, followed by an optional value,
and a sequence of statements enclosed in curly braces, as shown in
the example below:

@smallexample
@group
load-module outline @{
        command "outline";
@}
@end group
@end smallexample

  The closing curly brace may be followed by a semicolon, although
this is not required.

@node Server Settings
@subsection Server Settings
  Server settings control how @command{dictd} is executed on the
server machine.

@anchor{user statement}
@deffn {Configuration} user @var{string}
Run with the privileges of this user.  @command{Dictd} does not
require root privileges, so it is recommended to always use this
statement when running @command{dictd} in daemon mode.
@xref{Daemon Mode}. 

Example:
@smallexample
user nobody;
@end smallexample
@end deffn

@anchor{group statement}
@deffn {Configuration} group @var{list}
If @code{user} is given, @command{dictd} will drop all supplementary
groups and switch to the principal group of that user.  Sometimes,
however, it may be necessary to retain one or more supplementary
groups.  For example, this might be necessary to access dictionary
databases.  The @code{group} statement retains the supplementary
groups listed in @var{list}, e.g.:

@smallexample
user nobody;
group (man, dict);
@end smallexample

This statement is ignored if @code{user} statement is not present or
if @command{dictd} is running in inetd mode.  @xref{Inetd Mode}. 
@end deffn

@anchor{mode statement}
@deffn {Configuration} mode @var{enum}
Sets server operation mode. The argument is one of:

@table @asis
@item daemon
Run in daemon mode.  @xref{Daemon Mode}, for a detailed description.

@item inetd
Run in inetd mode.  @xref{Inetd Mode}, for a detailed description.
@end table

This statement is overridden by the @option{--inetd} command line
option. @xref{--inetd}.
@end deffn

@deffn {Configuration} listen @var{list};
Specify @acronym{IP} addresses and ports to listen on in daemon mode.
By default, @command{dictd} will listen on port 2628 on all existing
interfaces.  Use @code{listen} statement to abridge the list of
interfaces to listen on, or to change the port number. 

Elements of @var{list} can have the following form:

@table @asis
@item @var{host}:@var{port}
  Specifies an @acronym{IP}v4 socket to listen on.  The @var{host}
part is either a host name or an @acronym{IP} in ``dotted-quad''
form.  The @var{port} part is either a numeric port number or a
symbolic service name which is found in @file{/etc/services} file.

  Either of the two parts may be omitted.  If @var{host} is omitted,
it defaults to @samp{0.0.0.0}, which means ``listen on all
interfaces''.  If @var{port} is omitted, it defaults to 2628.  In this
case the colon may be omitted, too.

  Examples:
  
@smallexample
listen localhost:2628;
listen 127.0.0.1;
listen :2628;
@end smallexample

@item @var{filename}
  Specifies the name of a @acronym{UNIX} socket to listen on.
@end table

  The following statement instructs @command{dictd} to listen on
the address @samp{10.10.10.1}, port 2628 and on the @acronym{UNIX}
socket @file{/var/run/dict}:

@smallexample
listen (10.10.10.1, /var/run/dict);
@end smallexample

@end deffn

@deffn {Configuration} pidfile @var{string}
Store @acronym{PID} of the master process in this file.
Default is @file{@var{localstatedir}/run/dictd.pid}. 
Notice that the privileges of this default directory are
may be insufficient for @command{dictd} to write there after switching
to users privileges (@pxref{user statement}).  One solution to this is
to create a subdirectory with the same owner as given by @code{user}
statement and to point the @acronym{PID} file there:

@smallexample
pidfile /var/run/dict/dictd.pid;
@end smallexample

Another solution is to make @acronym{PID} directory group-writable and
to add the owner group to the @code{group} statement (@pxref{group
statement}).

@FIXME{I am not sure this is quite right.  Should `make install'
create the $localstate/run/dict directory?  But then, make doesn't
know what user to set as its owner...}
@end deffn

@deffn {Configuration} max-children @var{number}
Sets maximum number of sub-processes that can run simultaneously.
This is equivalent to the number of clients that can simultaneously
use the server.  The default is 64 sub-processes.
@end deffn

@deffn {Configuration} inactivity-timeout @var{number}
Set inactivity timeout to the @var{number} of seconds.  The server
will disconnect automatically if remote client did not send any
command within this number of seconds.  Setting timeout to 0 disables
inactivity timeout (the default).

Using this statement along with @code{max-children} allows to control
the server load.
@end deffn

@anchor{shutdown-timeout}
@deffn {Configuration} shutdown-timeout @var{number}
When the master server is shutting down, wait this number of seconds for all
children to terminate.  Default is 5 seconds.
@end deffn

@anchor{identity-check}
@deffn {Configuration} identity-check @var{boolean}
Enable identification check using @acronym{AUTH} protocol
(@acronym{RFC} 1413).  The received user name or @acronym{UID} can
be shown in access log using @code{%l} format (@pxref{Access Log}).
@end deffn

@deffn {Configuration} ident-keyfile @var{string}
Use encryption keys from the named file to decrypt @acronym{AUTH}
replies encrypted using @acronym{DES}.
@end deffn

@node Authorization
@subsection Authorization
@UNREVISED

@FIXME{
capability auth;
}

@smallexample
@group
# Define user database for authentication.
user-db <url: string> @{
  # Password file or query.
  get-password <arg: string>;

  # File containing user group information or a query to retrieve it.
  get-groups <arg: string>;
@}
@end group
@end smallexample

@deffn {Block} user-db @var{string}
# Define user database for authentication.

@deffn {user-db statement} get-password @var{string}
  # Password file or query.
@end deffn

@deffn {user-db statement} get-groups @var{string}
  # File containing user group information or a query to retrieve it.
@end deffn
@end deffn

@node ACL
@subsection Access Control Lists
@cindex @acronym{ACL}
@cindex access control lists
@dfn{Access control lists}, or @acronym{ACL}s for short, are lists of
permissions that can be applied to certain @command{dictd} objects.
They can be used to control who can connect to the dictionary server
and what resources are offered to whom.

@kwindex acl
An @acronym{ACL} is defined using @code{acl} block statement:

@smallexample
acl @var{name} @{
  @var{definitions}
@}
@end smallexample

The @var{name} parameter specifies a unique name for that
@acronym{ACL}.  This name will be used by another configuration
statements (@xref{Security Settings}, and @pxref{Database Visibility})
to refer to that @acronym{ACL}. 

A part between the curly braces (denoted by @var{definitions} above),
is a list of @dfn{access statements}.  There are two types of
such statements:  

@deffn {ACL} allow @var{user-group} @var{sub-acl} @var{host-list}
Allow access to resource.
@end deffn

@deffn {ACL} deny @var{user-group} @var{sub-acl} @var{host-list}
Deny access to resource.
@end deffn

All parts of an access statement are optional, but at least one
of them must be present.

The @var{user-group} part specifies which users match this entry.
Allowed values are the following:

@table @code
@kwindex all
@item all
All users.

@kwindex authenticated
@item authenticated
Only authenticated users.

@kwindex group
@item group @var{group-list}
Authenticated users which are members of at least one of groups listed in
@var{group-list}.
@end table

The @var{sub-acl} part, if present, allows to branch to another
@acronym{ACL}.  The syntax of this group is:

@smallexample
acl @var{name}
@end smallexample

@noindent
where @var{name} is the name of a previously defined @acronym{ACL}.

Finally, the @var{host-list} group allows to match client addresses.
It consists of a @code{from} keyword followed by a list of
@dfn{address specifiers}.  Allowed address specifiers are:

@table @asis
@item @var{addr}
Matches if the client @acronym{IP} equals @var{addr}.
The latter may be given either as an @acronym{IP}
address or as a host name, in which case it will be resolved and the
first of its @acronym{IP} addresses will be used.


@item @var{addr}/@var{netlen}
Matches if first @var{netlen} bits from the client @acronym{IP}
address equal to @var{addr}.  The network mask length, @var{netlen}
must be an integer number in the range from 0 to 32.  The address part,
@var{addr}, is as described above. 

@item @var{addr}/@var{netmask}
The specifier matches if the result of logical @acronym{AND} between
the client @acronym{IP} address and @var{netmask} equals to
@var{addr}.  The network mask must be specified in ``dotted quad''
form, e.g. @samp{255.255.255.224}.

@item @var{filename}
Matches if connection was received from a @acronym{UNIX} socket
@var{filename}, which must be given as an absolute file name.
@end table

To summarize, the syntax of an access statement is:

@smallexample
allow|deny [all|authenticated|group @var{group-list}]
           [acl @var{name}] [from @var{addr-list}]
@end smallexample

@noindent
where square brackets denote optional parts and vertical bar means
@samp{one of}.

When an @acronym{ACL} is applied to a particular object, its entries
are tried in turn until one of them matches, or the end of the list is
reached.  If a matched entry is found, its command verb, @code{allow}
or @code{deny}, defines the result of @acronym{ACL} match.  If the end
of list is reached, the result is @samp{allow}, unless explicitly
specified otherwise.

For example, the following statement defines an @acronym{ACL} named
@samp{common}, that allows access for any user connected via local
@acronym{UNIX} socket @file{/tmp/dictd.sock} or coming from a local
network @samp{192.168.10.0/24}.  Any authenticated users are allowed,
provided that they are allowed by another @acronym{ACL} @samp{my-nets}
(which should have been defined before this definition).  Users 
coming from the network @samp{10.10.0.0/24} are allowed if they
authenticate themselves and are members of groups @samp{dictd} or
@samp{users}.  Access is denied for anybody else:

@smallexample
@group
acl common @{
    allow all from ("/tmp/dictd.sock", "192.168.10.0/24");
    allow authenticated acl "my-nets";
    allow group ("dictd", "users") from "10.10.0.0/24";
    deny all;
@}
@end group
@end smallexample

@xref{Security Settings}, for information on how to control daemon
security settings.

@xref{Database Visibility}, for a detailed description on how to use
@acronym{ACL}s to control access to databases.  

@node Security Settings
@subsection Security Settings
  This subsection describes configuration settings that control access
to various resources served by @command{dictd}.

@deffn {Configuration} connection-acl @var{acl-name}
  Use @acronym{ACL} @var{acl-name} to control incoming connections.
The @acronym{ACL} itself must be defined before this statement.  Using
@var{user-group} (see previous subsection) in this @acronym{ACL} makes
no sense, because authentication is performed after connection is
established.

@smallexample
@group
acl incoming-conn @{
   allow from 213.130.0.0/19;
   deny any;
@}

connection-acl incoming-conn;
@end group
@end smallexample
@end deffn

@deffn {Configuration} show-sys-info @var{acl-name}
  This statement controls whether to show system information in reply
to @code{SHOW SERVER} command.  The information will be shown only
if @acronym{ACL} @var{acl-name} allows it.

@cindex system information
The system information shown includes the following data: name
of the package and its version, name of the system where it was
built and the kernel version thereof, host name, total operational
time of the daemon, number of subprocesses executed so far and average
usage frequency.  For example:

@smallexample
dictd (dico @value{VERSION}) on Linux 2.6.24.4,
dict.example.net up 110+04:42:58, 19647044 forks (6867.9/hour)
@end smallexample
@end deffn

@node Logging and Debuging
@subsection Logging and Debuging
@cindex logging, configuration
  The directive described in this subsection provide basic logging
capabilities.  

@deffn {Configuration} log-tag @var{string}
Prefix syslog messages with this string.  By default, the program name
is used.
@end deffn

@deffn {Configuration} log-facility @var{string}
Set syslog facility to use.  Allowed values are: @samp{user},
@samp{daemon}, @samp{auth}, @samp{authpriv}, @samp{mail}, @samp{cron},
@samp{local0} through @samp{local7} (case-insensitive), or a facility
number.
@end deffn

@deffn {Configuration} log-print-severity @var{boolean}
Prefix diagnostics messages with a string identifying their severity.
@end deffn

@deffn {Configuration} transcript @var{boolean}
Log session transcript.  The lines received from client are prefixed
with @samp{C:}, those sent in reply are marked with @samp{S:}.  Here is
an exerpt from the transcript output:

@smallexample
S: 220 Trurl.gnu.org.ua dictd (dico 1.99.90) <mime.xversion>
<1645.1212874507@@Trurl.gnu.org.ua>
C: client ``Kdict''
S: 250 ok
C: show db
S: 110 16 databases present
S: afr-deu ``Afrikaans-German Freedict dictionary''
S: afr-eng ``Afrikaans-English FreeDict Dictionary''
[...]
S: .
S: 250 ok
@end smallexample

This option produces lots of output and can significantly slow down
the server.  Use it only if you are debugging @command{dictd} or
some remote client.  Never use it in a production environment.
@end deffn

@node Access Log
@subsection Access Log
@cindex access log
@cindex logging requests
@cindex Apache
  Dico provides a feature similar to Apache's @code{CustomLog}, which
allows to keep a log of @code{MATCH} and @code{DEFINE} requests.  To
enable this feature, specify the name of the log file using the
following directive:
  
@deffn {Configuration} access-log-file @var{string}
Set access log file name.

@smallexample
access-log-file /var/log/dico/access.log;
@end smallexample
@end deffn

  The format of log file entries is specified using
@code{access-log-format} directive:

@deffn {Configuration} access-log-format @var{string}
Set format string for access log file.
@end deffn

@cindex % formats
  Its argument can contain literal characters, which are copied into
the log file verbatim, and @dfn{format specifiers}, i.e. special
sequences which begin with @samp{%} and are replaced in the log file
as shown in the table below.

@table @asis
@item %%
The percent sign.

@item %a
Remote @acronym{IP}-address.

@item %A
Local @acronym{IP}-address.

@item %B
Size of response in bytes.

@item %b
Size of response in bytes in @acronym{CLF} format, i.e. a @samp{-} rather
than a @samp{0} when no bytes are sent.

@item %C
Remote client (from @code{CLIENT} command). 

@item %D
The time taken to serve the request, in microseconds.

@item %h
Remote host.

@item %H
Request command verb (@code{DEFINE} or @code{MATCH}).

@item %l
Remote logname (from identd, if supplied).  This will return a
dash unless @code{identity-check} is set to true.
@xref{identity-check}.

@item %m
The search strategy.

@item %p
The canonical port of the server serving the request.

@item %P
The @acronym{PID} of the child that serviced the request.

@item %q
The database from the request.

@item %r
Full request.

@item %@{@var{n}@}R
The @var{n}th token from the request (@var{n} is 0-based).

@item %s
Reply status.  For multiple replies, the form @samp{%s} returns the
status of the first reply, while @samp{%>s} returns that of the last
reply.

@item %t
Time the request was received in the standard Apache format, e.g.:

@smallexample
[04/Jun/2008:11:05:22 +0300]
@end smallexample

@item %@{@var{format}@}t
The time, in the form given by @var{format}, which should be a valid
@code{strftime} format.  @xref{Time and Date Formats}, for a detailed
description.

The standard @samp{%t} format is equivalent to

@smallexample
[%d/%b/%Y:%H:%M:%S %z]
@end smallexample

@item %T
The time taken to serve the request, in seconds.

@item %u
Remote user from @code{AUTH} command.

@item %v
The host name of the server serving the request.  @xref{hostname
directive}.

@item %V
Actual host name of the server (in case it was overridden in
configuration).

@item %W
The word from the request.
@end table

  For the reference, here is the list of format specifiers that
have different meaning than in Apache: @samp{%C}, @samp{%H}, @samp{%m},
@samp{%q}.  The following format specifiers are unique to Dico:
@samp{%@{@var{n}@}R}, @samp{%V}, @samp{%W}.

  Absense of the @code{access-log-format} directive is equivalent to
the following statement:

@smallexample
access-log-format "%h %l %u %t \"%r\" %>s %b";
@end smallexample

@cindex webalizer
  It was chosen so as to be compatible with Apache access logs and 
be easily parsable by existing log analyzing tools, such as
@command{webalizer}.

  Extending this format string with the client name produces a log
format similar to Apache @samp{combined log}:

@smallexample
access-log-format "%h %l %u %t \"%r\" %>s %b \"\" \"%C\"";
@end smallexample


@node General Settings
@subsection General Settings
  The settings in this subsection configure basic behavior of the
@acronym{DICT} daemon.
  
@deffn {Configuration} initial-banner-text @var{string}
Display the @var{string} in the textual part of the initial server
reply.

@anchor{initial reply}
When connection is established, the server sends an initial reply to
the client, that looks like in the example below:

@smallexample
220 Trurl.gnu.org.ua <auth.mime> <520.1212912026@@Trurl.gnu.org.ua>
@end smallexample

The part of this reply after the host name and the first angle
bracket is modifiable and can contain arbitrary text.  You can use
@code{initial-banner-text} to append any additional information
there.  Note, that @var{string} may not contain newlines.  For
example:

@smallexample
initial-banner-text "Please authenticate yourself,";
@end smallexample

This statement produces the following initial reply (split over two
lines for readability):

@smallexample
220 Trurl.gnu.org.ua Please authenticate yourself,
  <auth.mime> <520.1212912026@@Trurl.gnu.org.ua>
@end smallexample
@end deffn

@anchor{hostname directive}
@deffn {Configuration} hostname @var{string}
Set the hostname.  By default, the server determines it automatically.  If,
however, it makes a wrong guess, you can fix it using this directive.

The server hostname is used, among others, in the initial reply after
@samp{220} code (see above) and may also be displayed in the access
log file using @samp{%v} escape (@pxref{Access Log}).
@end deffn

@deffn {Configuration} server-info @var{string}
Set server description to be shown in reply to @code{SHOW SERVER} command.

The first line of the reply, after the usual @samp{114} response line,
shows the name of host where the server is running.  If the settings
of @code{show-sys-info} and @code{sys-info-groups} (@pxref{Security
Settings}) allow, some additional information about the system is
printed.

The lines that follow are taken from the @code{server-info}
directive.  It is common to specify @var{string} using
``here-document'' syntax (@pxref{here-document}), e.g.:

@smallexample
server-info <<EOT
Welcome to the FOO dictionary service.

Contact <dict@@foo.org> if you have questions or
suggestions.
EOT;
@end smallexample

@end deffn

@deffn {Configuration} help-text @var{string}
Set the text to be displayed in reply to the @acronym{HELP} command.

The default reply to @acronym{HELP} command displays a list of
commands understood by the server with a short description of each.

You can use @command{help-text} directive to @emph{append} arbitrary
text to that output, provided that you begin @var{string} with a
plus sign, e.g.:

@smallexample
help-text <<-EOT
  +
  The commands beginning with an X are extensions.
EOT;
@end smallexample

If @var{string} begins with any character, except @samp{+}, it will
replace the default help output.  For example:

@smallexample
help-text <<-EOT
  There is no help.
  See RFC 2229 for detailed information.
EOT;
@end smallexample
@end deffn

@deffn {Configuration} default-strategy @var{string}
Set the name of the default matching strategy
(@FIXME-pxref{strategies}).  By default, Levenshtein matching is used,
which is equivalent to

@smallexample
default-strategy lev;
@end smallexample
@end deffn

@node Capabilities
@subsection Server Capabilities
  @dfn{Capabilities} are certain server features that can be enabled
or disabled at the system administrator's will. 

@deffn {Configuration} capability @var{list}
Request additional capabilities from @var{list}.
@end deffn

  The argument to @code{capability} directive must contain names
of existing Dico capabilities.  These are listed in the following
table:

@table @asis
@item auth
The @code{AUTH} command is supported. @xref{Authorization}.

@item mime
The @code{OPTION MIME} command is supported.  Notice that
@acronym{RFC} 2229 requires all servers to support that command, so
you should always specify this capability.

@item xversion
The @code{XVERSION} command is supported.  It is a Dico extension that
displays the @command{dictd} implementation and version number. 
@FIXME-xref{extended and experimental commands}.

@item xlev
The @code{XLEV} command is supported.  This command allows to set and
query maximal Levenshtein distance for @code{lev} matching strategy.
@FIXME-xref{matching strategies}. @FIXME-xref{extended and
experimental commands}. 
@end table

  Capabilities set using the @command{capability} directive are
displayed in the initial server reply (@pxref{initial reply}), and
appropriate entries are added to the @code{HELP} command output.

@node Handlers
@subsection Database Modules and Handlers
@cindex database module, defined
  A @dfn{database module} is an external piece of software designed to
handle a particular format of dictionary databases.  This piece of
software is built as a shared library so that @command{dictd} can load
at run time.

@cindex database handler, defined
  A @dfn{handler} is an instance of a database module loaded by
@command{dictd} and configured for a specific database or a set of
databases. 

  Database handlers are defined using the following block statement:
  
@deffn {Configuration} load-module @var{string}
Create an instance of a database module.  The argument specifies a unique name
which will be used by subsequent parts of the configuration to refer to this
handler.  The @code{handler} statement is a block statement.  The only
sub-statement allowed within it is @code{command} statement:

@deffn {load-module config} command @var{string}
Set the command line for this handler.  It is similar to shell's
command line: it consists of a name of database module, optionally
followed by a whitespace-separated list of its arguments. Just as in
shell, the name of the module specifies the disk file which should be
loaded.  Arguments are passed to modules @dfn{initialization function}
(@FIXME-pxref{module_init}).
@end deffn
@end deffn

For example:

@smallexample
@group
load-module dict @{
  command "dictorg dbdir=/var/dictdb";
@}
@end group
@end smallexample

This statement defines a handler named @samp{dict}, which loads
the module @file{dictorg} and passes its initialization function a
single argument, @samp{dbdir=/var/dictdb}.  If the module name is not
an absolute file name, as in this example, the loadable module will be
searched in the module load path.

@cindex module load path
@cindex load path
  A @dfn{module load path} is an internal list of directories which
@command{dictd} scans in order to find a loadable file name specified
in @code{command} statement of a @code{load-module} block.  By default the
order of search is as follows:

@enumerate 1
@item
Dico module directory: @file{$prefix/lib/dico}.

@item
Additional search directories specified with the
@code{module-load-path} directive (see below).

@item
@vrindex LTDL_LIBRARY_PATH
The value of the environment variable @env{LTDL_LIBRARY_PATH}.

@item
@flindex /etc/ld.so.conf
@vrindex LD_LIBRARY_PATH
The system dependent library search path (e.g. on Linux it is set
by the contents of the file @file{/etc/ld.so.conf} and the value of
the environment variable @env{LD_LIBRARY_PATH}.
@end enumerate

The value of @env{LTDL_LIBRARY_PATH} and @env{LD_LIBRARY_PATH} must be a
colon-separated list of absolute directories, for example,
@samp{/usr/lib/mypkg:/lib/foo}.

In any of these directories, @command{dictd} first attempts to find and
load the given filename.  If this fails, it tries to append the
following suffixes to it:

@enumerate 1
@item
the libtool archive suffix @samp{.la}

@item
the suffix used for native dynamic libraries on the host platform,
e.g., @samp{.so}, @samp{.sl}, etc. 
@end enumerate

@deffn {Configuration} module-load-path @var{list}
This directive adds the directories listend in its argument to the
module load path.  Example:

@smallexample
module-load-path (/usr/lib/dico,/usr/local/dico/lib);
@end smallexample
@end deffn

@node Databases
@subsection Databases
@cindex databases, defining
  Dictionary databases are defined using @code{database} block
statement.

@deffn {Configuration} database
Define a dictionary database.  At least two sub-statements must be
defined for each database: @code{name} and @code{handler}.
@end deffn

@deffn {Database} name @var{string}
Set the name of this database (a single word).  This name will be used
to identify this database in @acronym{DICT} commands.
@end deffn

@deffn {Database} handler @var{string}
Specify the name of a handler for this database and any arguments for
it.  This handler must be previously defined using @code{load-module}
statement (@pxref{Handlers}).  
@end deffn

For example, the following fragment defines a database named
@samp{en-de}, which is handled by @samp{dictord} handler.  The handler
is passed one argument, @code{database=en-de}:

@smallexample
database @{
        name "en-de";
        handler "dictorg database=en-de";
@}
@end smallexample

More directives are available to fine-tune the database.

@deffn {Database} description @var{string}
Supply a short description, to be shown in reply to @command{SHOW DB}
command.  The @var{string} may not contain new-lines.

Use this statement if the database itself does not supply a
description, or if its description is malformed.

In any case, if @code{description} directive is specified, its value
takes precedence over description string retrieved from the database
itself. 
@end deffn

@deffn {Database} info @var{string}
Supply a full description of the database.  This description is shown
in reply to @code{SHOW INFO} command.  The @var{string} is usually a
multi-line text, so it is common to use here-document syntax
(@pxref{here-document}), e.g.:

@smallexample
@group
info <<- EOT
   This is a foo-bar dictionary.
   Copyright (C) 2008 foo-bar dict group.
   Distributed under the terms of GNU Free
   Documentation license.
EOT;
@end group
@end smallexample

Use this statement if the database itself does not supply a full
description, or if its full description is malformed.

As with @code{description}, the value of @code{info} takes precedence
over info strings retrieved from the database.
@end deffn

The following two directives control the content type and transfer
encoding used when formatting replies from this database if
@code{OPTION MIME} is in effect:

@deffn {Database} content-type @var{string}
Set the content type of the reply.  E.g.:

@smallexample
directory @{
   name "foo";
   handler "dictorg";
   content-type "text/html";
   ...
@}   
@end smallexample
@end deffn

@deffn {Database} content-transfer-encoding @var{enum}
Set transfer encoding to use when sending @acronym{MIME} replies for
this database.  Allowed values for @var{enum} are:

@table @asis
@item base64
Use @acronym{BASE64} encoding.

@item quoted-printable
Use quoted-printable encoding.
@end table
@end deffn

@menu
* Database Visibility::
@end menu

@node Database Visibility
@subsubsection Database Visibility
@cindex database visibility
@cindex visibility, database
  A property called @dfn{database visibility} is associated with each
dictionary database.  It determines whether the database appears in
the output of @code{SHOW DB} command, and takes part in dictionary
searches.

  By default, all databases are defined as publicly visible.  You can,
however, abridge their visibility on global as well as on
per-directory basis.  This can be achieved using @dfn{visibility
@acronym{ACL}s}.

  In general, the visibility of a database is controlled by two access
control lists: global visibility @acronym{ACL} and database visibility
@acronym{ACL}.  The latter takes precedence over the former.

  Both @acronym{ACL}s are defined using @code{visibility-acl} statement:

@deffn {Configuration} visibility-acl @var{acl-name}
Set name of an @acronym{ACL} controlling database visibility.  If used
in global scope, this statement sets global visibility @acronym{ACL}.
If used within a @code{database} block, it sets visibility
@acronym{ACL} for that particular database.
@end deffn

  Consider the following example:

@smallexample
acl glob-vis @{
  allow authenticated;
  deny all;
@}  

acl local-nets @{
  allow from (192.168.10.0/24, /tmp/dictd.sock);
@}

visibility-acl glob-vis;

database @{
  name "terms";
  visibility-acl local-nets;
@}
@end smallexample

In this configuration, the @samp{terms} database is visible to
everybody coming from the @samp{192.168.10.0/24} network and from
the @acronym{UNIX} socket @file{/tmp/dictd.sock}, without
authorization.  It is not visible to users coming from elsewhere,
unless they authenticate themselves.

@node Tuning
@subsection Tuning

  While tuning your server, it is often necessary to get timing
information which shows how much time is spent serving certain
requests.  This can be achieved using @code{timing} configuration
directive:

@deffn {Configuration} timing @var{boolean}
Provide timing information after successful completion of an
operation.  This information is displayed after the following
requests: @code{MATCH}, @code{DEFINE}, and @code{QUIT}.  It consists
of the following parts:

@smallexample
[d/m/c = @var{nd}/@var{nm}/@var{nc} @var{RT}r @var{UT}u @var{ST}s]
@end smallexample

@noindent
where:

@table @var
@item nd
Number of processed define requests.  It is @samp{0} after a
@code{MATCH} request.

@item nm
Number of processed match requests.  It is @samp{0} after a
@code{DEFINE} request. 

@item nc
Number of comparisons made.  This value may be inaccurate if the
underlying database module is not able to count comparisons.

@item RT
Real time spent serving the request.

@item UT
Time in user space spent serving the request.

@item ST
Time in kernel space spent serving the request.
@end table

An example of a server reply with timing information follows:

@smallexample
250 Command complete [d/m/c = 0/63/107265 2.293r 1.120u 0.010s]
@end smallexample
@end deffn

You can also add timing information to your access log files, see
@ref{Access Log, %T}.

@node Preprocessor
@subsection Using Preprocessor to Improve the Configuration.
@cindex preprocessor
@cindex m4
  Before parsing configuration file, Dico preprocesses
it.  The built-in preprocessor handles only file inclusion
and @code{#line} statements (@pxref{Pragmatic Comments}), while the
rest of traditional preprocessing facilities, such as macro expansion,
is supported via @command{m4}, which is used as an external preprocessor. 

  The detailed description of @command{m4} facilities lies far beyond
the scope of this document.  You will find a complete user manual in
@ifnothtml
@ref{Top, GNU M4 manual, GNU M4, m4, GNU M4 macro processor}.
@end ifnothtml
@ifhtml
@uref{http://www.gnu.org/software/m4/manual}.
@end ifhtml
For the rest of this subection we assume the reader is sufficiently
acquainted with @command{m4} macro processor.

@flindex pp-setup
  The external preprocessor is invoked with @option{-s} flag, instructing
it to include line synchronization information in its output.  This
information is then used by the parser to display meaningful
diagnostic.  An initial set of macro definitions is supplied by the 
@file{pp-setup} file, located in
@file{@var{$prefix}/share/dico/@var{version}/include} directory (where
@var{version} means the version of the Dico package).

The default @file{pp-setup} file renames all @command{m4} built-in
macro names so they all start with the prefix @samp{m4_}.  This
is similar to GNU m4 @option{--prefix-builtin} options, but has an
advantage that it works with non-GNU @command{m4} implementations as
well.  

As an example of how the use of preprocessor may improve
@command{dictd} configuration, consider the following fragment taken
from one of the installations of Dico.  This installation offers quite
a few Freedict dictionaries.  The database definition for each of them
is almost the same, except for the dictionary name and eventual
description entry for several databases that miss it.  To avoid
repeating the same text over again, we define the following macro:

@smallexample
@group
# defdb(@sc{name}[, @sc{descr}])
# @r{Produce a standard definition for a database @sc{name}}.
# @r{If @sc{descr} is given, use it as a description}.
m4_define(`defdb', `
database @{
        name "$1";
        handler "dictorg database=$1";m4_dnl
m4_ifelse(`$2',,,`
        description "$2";')
@}
')
@end group
@end smallexample

It takes two arguments.  The first one, @sc{name} defines the dictionary
name visible in the output of @code{SHOW DB} command.  Optional second
argument may be used to supply a description string for the databases
that miss it.

Given this macro, the database definitions look like:

@smallexample
@group
defdb(eng-swa)
defdb(swa-eng)
defdb(afr-eng, Afrikaans-English Dictionary)
defdb(eng-afr, English-Afrikaans Dictionary)
@end group
@end smallexample

@node Dictd Invocation
@section Dictd Invocation
@cindex invocation
@cindex command line options
@cindex options, @command{dictd}.
   This section summarizes @command{dictd} command line options.
   
@table @option
@opsummary{config}
@item --config=@var{file}
Read this configuration file istead of the default
@file{@var{$sysconfdir}/dictd.conf}.  @xref{Configuration}.

@opsummary{foreground}
@item -f
@itemx --foreground
Operate in foreground.  @xref{Daemon Mode}.

@opsummary{stderr}
@item --stderr
Output diagnostic to stderr.  @xref{Daemon Mode, --stderr}.

@opsummary{syslog}
@item --syslog
After successful startup, output any diagnostic to syslog.  This is
the default.

@item -E
Preprocess configuration file and exit.  @xref{Preprocessor}.

@opsummary{preprocessor}
@item --preprocessor=@var{prog}
Use @var{prog} as a preprocessor for configuration file.  The default
preprocessor command line is @command{m4 -s}, unless overridden while
configuring the package (@pxref{Default Preprocessor}).

@xref{Preprocessor}.

@opsummary{no-preprocessor}
@item --no-preprocessor
Do not use external preprocessor.  @xref{Preprocessor}.

@opsummary{include-dir}
@item -I @var{dir}
@itemx --include-dir=@var{dir}
Add the directory @var{dir} to the list of directories to be searched for
preprocessor include files.  @xref{Preprocessor}.

@opsummary{single-process}
@item -s
@itemx --single-process
In daemon mode, process connections in the main process, without
starting subprocesses for each connection (@pxref{Daemon Mode}).  This
means that the daemon is able to serve only one client at a time.  The
@option{--single-process} option is provided for debugging purposes
only.  Never use it in production environment.

@opsummary{inetd}
@item -i
@itemx --inetd
Run in inetd mode.  @xref{Inetd Mode}.

@opsummary{debug}
@item -x
@itemx --debug=@var{level}
Set debug verbosity level.  The @var{level} argument is an integer 
ranging from @samp{0} (no debugging) to @samp{100} (maximum debugging
information_.

@opsummary{trace-grammar}
@item --trace-grammar
Trace parsing of the config file.  The option is provided for debuging
purposes. 

@opsummary{trace-lex}
@item --trace-lex
Trace config file lexer.  The option is provided for debuging
purposes. 

@opsummary{config-help}
@item --config-help
Show configuration file summary.  @xref{Configuration}.

@opsummary{lint}
@item -t
@itemx --lint
Check configuration file syntax and exit with code @samp{0} if it is
OK, or with @samp{1} if there are errors.  @xref{Configuration}.

@opsummary{help}
@item -h
@itemx --help
Display a short command line option summary and exit.

@opsummary{usage}
@item --usage
List all available command line options and exit.

@opsummary{version}
@item --version
Print program version and exit.
@end table

@node Modules
@chapter Modules
@UNREVISED
  Dico comes with a set of loadable modules for handling several
database formats and for extending its functionality.  The modules
are binary loadable files, installed in
@file{@var{$prefix}/lib/dico}.  They are configured via @dfn{command
line arguments}, passed to the @code{command} configuration directive
(@pxref{Handlers, command}) for per-module configuration, and to
@code{handler} directive (@pxref{Databases, handler}, for per-database
configuration). 

@menu
* Outline::
* Dictorg::
* Guile::
@end menu

@node Outline
@section The @command{outline} module.
@cindex outline module
  The @command{outline} module supports databases written in
@dfn{Emacs outline mode}.  It is not designed for storing large
amounts of data, its purpose rather is to handle small databases that
can be composed easily and quickly using the Emacs editor.

@cindex outline mode
  The outline mode is described in @ref{Outline Mode, Outline Mode,
Outline Mode, emacs, The Emacs Editor}.  In short it is a usual plain
text file, containing @dfn{header lines} and @dfn{body lines}.  Header
lines start with one or more stars, the number of starts indicating
the depth of heading in the document structure: one star for chapters,
two stars for sections, etc.  Body lines are anything that is not
header lines.

@cindex outline dictionary
  The outline dictionary must have at least a chapter named
@samp{Dictionary}, that contains dictionary corpus.  Within it, each
subsection is treated as a dictionary article, its header line giving
the headword, and its body lines supplying the article itself.  Apart
from this, two more chapters have special meaning.  The
@samp{Description} chapter gives a short description to be displayed
on @code{SHOW DB} command, and the @samp{Info} chapter supplies a full
database description for @code{SHOW INFO} output.  Both chapters are
optional.

  All three reserved chapter names are case-insensitive.

  To summarize, the structure of an outline database is:

@smallexample
* Description
@var{line}
   
* Info
@var{text}

* Dictionary

** @var{line}
@var{text}

[@r{any number of entries follows}]
@end smallexample

@cindex Ambrose Bierce
@cindex Devil's Dictionary
@flindex devils.out
  The Dico package is shipped with Ambrose Bierce's @cite{Devil's
Dictionary} in ouline format, see @file{tests/devils.out}.

  Outline module initialization does not require any command line
parameters, specifying @code{command "outline";} is enough.  To
declare a database, supply its full file name to @code{handler}
directive, as shown in the example below:

@smallexample
@group
load-module outline @{
   command "outline";
@}

database @{
   name "devdict";
   handler "outline /var/db/devils.out";
@}
@end group
@end smallexample

@node Dictorg
@section The @command{dictorg} module.
@cindex dictorg module
  The @command{dictorg} module supports dictionaries in the format
designed by @cite{@acronym{DICT} development group}
(@uref{http://dict.org}).  Lots of free dictionaries in this format
are available from @uref{http://freedict.org, @cite{FreeDict}
project}.

  A dictionary in this format consists of two files: a @dfn{dictionary
database file}, named @file{@var{name}.dict} or
@file{@var{name}.dict.dz} (a compressed form), and an @dfn{index file},
which lists article headwords and corresponding offsets in the
database.  The index file is named @file{@var{name}.index}.  The
common part of these two file names, @var{name}, is called the @dfn{base
name} for that dictionary.

@cindex dictorg handler definition
  An instance of the @command{dictorg} module is created using the
following statement:

@smallexample
load-module @var{inst-name} @{
    command "dictorg [@var{options}]";
@}
@end smallexample

@noindent
where square brackets denote optional part.  Valid @var{options} are
the following:

@cindex dictorg initialization options
@table @option
@kwindex dbdir
@item dbdir=@var{dir}
Look for databases in directory @var{dir}.

@kwindex show-dictorg-entries
@item show-dictorg-entries
@dfn{Dictorg entries} are special database entries that keep some
service information, such as database description, etc.  Such entries
are marked with headwords that begin with @samp{00-database-}.  By
default they are exempt from database look-ups and cannot be retrieved
using @code{MATCH} or @code{DEFINE} command.

Using @option{show-dictorg-entries} removes this limitation and makes
these entries behave as other database entries.

@kwindex sort
@item sort
Sort the database index after loading.  This option is designed for
use with some databases that have malformed indexes.  At the time of
this writing the @samp{eng-swa} database from @cite{FreeDict} requires
this option.

Using @code{sort} may considerably slow down initial database loading.

@kwindex trim-ws
@item trim-ws
Remove trailing whitespace from dictionary headwords at start up.
This might be necessary for some databases.
@end table

The values set via these options become defaults for all databases
using this module instance, unless overridden in their declarations.

@cindex dictorg database declaration
A database that uses this module must be declared as follows:

@smallexample
@group
database @{
    handler "@var{inst-name} database=@var{file} [@var{options}]";
    ...
@}
@end group
@end smallexample

@noindent
where @var{inst-name} is the instance name used in the @code{load-module}
declaration above.

@kwindex database
  The @code{database} argument specifies the base name of the
database.  Unless @var{file} begins with a slash, the value of
@code{dbdir} initialization option is prepended to it.  If
@code{dbdir} is not given and @var{file} does not begin with a slash,
an error is signalled.

@kwindex noshow-dictorg-entries
@kwindex nosort
@kwindex notrim-ws
  The @var{options} above are the same options as described in
initialization procedure: @code{show-dictorg-entries}, @code{sort},
and @code{trim-ws}.  If used, they override initialization settings for
that particular database.  Forms prefixed with @samp{no} may be used
to disable the corresponidng option for this database.  For example, 
@code{notrim-ws} cancels the effect of @code{trim-ws} used when
initializing the module instance.
 
@node Guile
@section The @command{guile} module.
@cindex Guile
@cindex Scheme
  @dfn{Guile} is an acronym for @dfn{GNU's Ubiquitous Intelligent
Language for Extensions}. It provides a Scheme interpreter conforming
to the R5RS language specification and a number of convenience
functions.  For information about the language, refer to
@ref{Top,,,r5rs,Revised(5) Report on the Algorithmic Language Scheme}.
For a detailed description of Guile and its features, see
@ref{Top,,Overview,guile,The Guile Reference Manual}.

  The @command{guile} module provides an interface to Guile that allows writing
Dico modules in Scheme language.  The module is loaded
using the following configuration file statement:

@smallexample
@group
load-module @var{mod-name} @{
   command "guile [@var{options}]"
           " init-script=@file{@var{script}}"
           " init-fun=@var{function}";
@}
@end group
@end smallexample

@kwindex init-script
@kwindex init-fun
  The @code{init-script} parameter specifies the name of a Scheme
source file that must be loaded in order to initialize the module.
The @code{init-fun} parameter specifies the name of a function that
will be invoked to perform the initialization of the module and of
particular databases.  @xref{Guile Interface}, for a description of
initialization sequence.  Optional arguments, @var{options}, are:

@table @code
@kwindex debug
@item debug
  Enable Guile debugging and stack traces.

@kwindex nodebug
@item nodebug
  Disable Guile debugging and stack traces (default).

@kwindex load-path
@item load-path=@var{path}
  Append directories from @var{path} to the list of directories which
should be searched for Scheme modules and libraries.  The @var{path}
must be a list of directory names, separated by colons.

  This option modifies the value of Guile's @code{%load-path}
variable.  @xref{Build Config, %load-path, {Configuration\, Build and
Installation}, guile, The Guile Reference Manual}.

@kwindex outfile
@item outfile=@var{file}
  Bind current error and output ports to the named @var{file}.
@end table

  Guile databases are declared using the following syntax:

@smallexample
@group
database @{
        name "@var{dbname}";
        handler "@var{mod-name} @var{cmdline}";
@}
@end group
@end smallexample

@noindent
where:

@table @var
@item dbname
gives the name for this database,

@item mod-name
is the name given to Guile module in @code{load-module} statement (see
above),

@item cmdline
is the command line that will be passed to the Guile
@code{open-module} function (@FIXME-pxref{open-module}).
@end table

@menu
* Guile Interface::
@end menu

@node Guile Interface
@subsection Guile Interface
@UNREVISED

@defun dico-strat-selector? @var{strat}
Return true if @var{strat} has a selector.
@end defun

@defun dico-strat-select? @var{strat} @var{word} @var{key}
Return true if @var{key} matches @var{word} as per strategy selector
@var{strat}.
@end defun

@defun dico-strat-name @var{strat}
Return the name of strategy @var{strat}.
@end defun

@defun dico-strat-description @var{strat}
Return a textual description of the strategy @var{strat}.
@end defun

@defun dico-strat-default? @var{strat}
Return @code{true} if @var{strat} is a default
strategy. @FIXME-xref{default strategy}.
@end defun

@defun dico-register-strat @var{strat} @var{descr} [@var{fun}]
Register a new strategy.

@smalllisp
(define (@var{fun} key word)
  ...)
@end smalllisp
@end defun

@node Interface
@chapter Dico Module Interface
@UNREVISED

@node Reporting Bugs
@chapter How to Report a Bug
@UNREVISED
  
@node Time and Date Formats
@appendix Time and Date Formats
@include strftime.texi

@node Copying This Manual
@appendix GNU Free Documentation License
@include fdl.texi

@node Concept Index
@comment node-name,  next,  previous,  up
@unnumbered Concept Index

This is a general index of all issues discussed in this manual.

@printindex cp

@bye




